generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  
}

enum UserRole {
  admin
  user
}
enum OAuthProvider {
  discord
  github
  google
}
enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
}
enum QuizStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
enum Difficulty {
  EASY
  MEDIUM
  HARD
}
enum QuizAttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

model User {
  id                 String             @id @default(uuid())
  name               String
  email              String             @unique
  emailVerified      DateTime?
  password           String?
  salt               String?
  bio                String?
  role               UserRole           @default(user)
  avatarUrl          String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  // Relasi
  oAuthAccounts      UserOAuthAccount[]
  verificationTokens VerificationToken[]
  createdQuizzes     Quiz[]
  quizAttempts       QuizAttempt[]
  quizLikes          QuizLike[]         
  savedQuizzes       SavedQuiz[]        
}

model UserOAuthAccount {
  userId            String
  provider          OAuthProvider
  providerAccountId String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [identifier], references: [id], onDelete: Cascade)
  @@id([identifier, token])
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  quizzes     Quiz[]
}

model Tag {
  id      String @id @default(uuid())
  name    String @unique
  quizzes Quiz[] @relation("QuizTags")
}

model Quiz {
  id                 String      @id @default(uuid())
  title              String
  description        String?
  duration           Int
  status             QuizStatus  @default(DRAFT)
  difficulty         Difficulty  @default(MEDIUM)
  shuffleQuestions   Boolean     @default(false)
  isAiGenerated      Boolean     @default(false)   // [MODIFIED]
  takesCount         Int         @default(0)       // [MODIFIED]
  likesCount         Int         @default(0)       // [MODIFIED]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // Relasi
  categoryId         String?
  category           Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags               Tag[]       @relation("QuizTags")
  creatorId          String
  creator            User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  questions          Question[]
  attempts           QuizAttempt[]
  likes              QuizLike[]    // [NEW]
  savedBy            SavedQuiz[]   // [NEW]
}

model Question {
  id            String       @id @default(uuid())
  questionText  String
  questionType  QuestionType
  points        Int          @default(1)
  explanation   String?
  createdAt     DateTime     @default(now())
  quizId        String
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options       Option[]
  answers       UserAnswer[]
  @@index([quizId])
}

model Option {
  id         String     @id @default(uuid())
  optionText String
  isCorrect  Boolean    @default(false)
  questionId String
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    UserAnswer[]
  @@index([questionId])
}

model QuizAttempt {
  id          String            @id @default(uuid())
  score       Float
  status      QuizAttemptStatus @default(IN_PROGRESS)
  startedAt   DateTime          @default(now())
  completedAt DateTime?
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz              @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     UserAnswer[]
  @@index([userId, quizId])
}

model UserAnswer {
  id               String   @id @default(uuid())
  questionId       String
  selectedOptionId String?
  shortAnswer      String?
  isCorrect        Boolean
  createdAt        DateTime @default(now())
  attemptId        String
  attempt          QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   Option?     @relation(fields: [selectedOptionId], references: [id], onDelete: SetNull)
  @@unique([attemptId, questionId], name: "attemptId_questionId")
  @@index([attemptId])
  @@index([questionId])
}

model QuizLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, quizId])
  @@index([quizId, userId])
}

model SavedQuiz {
  id        String   @id @default(uuid())
  savedAt   DateTime @default(now())
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, quizId])
  @@index([quizId, userId])
}